# Grafana with Let's Encrypt in a Docker Compose


# Note that ldap.toml should be in the same directory with grafana-traefik-letsencrypt-docker-compose.yml
# Edit ldap.toml according to your requirements.

# Run grafana-restore-database.sh to restore database if needed.

# Deploy Grafana server with a Docker Compose using the command:
# docker compose -f grafana-traefik-letsencrypt-docker-compose.yml -p grafana up -d


volumes:
  grafana-postgres:
  grafana-postgres-backups:
  traefik-certificates:

services:
  postgres:
    image: docker.io/bitnami/postgresql:latest
    volumes:
      - grafana-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: grafanadb
      POSTGRES_USER: grafanadbuser
      POSTGRES_PASSWORD: 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  grafana:
    image: docker.io/bitnami/grafana:latest
    volumes:
      - ./ldap.toml:/etc/grafana/ldap.toml
    environment:
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      # Database name (replace with yours)
      GF_DATABASE_NAME: grafanadb
      # Database user (replace with yours)
      GF_DATABASE_USER: grafanadbuser
      # Database password (replace with yours)
      GF_DATABASE_PASSWORD: 
      # Grafana domain (replace with yours)
      GF_SERVER_DOMAIN: 
      # Grafana URL (replace with yours)
      GF_SERVER_ROOT_URL: 
      # Grafana user (replace with yours)
      GF_SECURITY_ADMIN_USER: grafanaadmin
      # Grafana password (replace with yours)
      GF_SECURITY_ADMIN_PASSWORD: 
      GF_AUTH_ANONYMOUS_ENABLED: 'false'
      GF_AUTH_ANONYMOUS_DISABLE_LOGIN_FORM: 'false'
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_AUTH_LDAP_ENABLED: 'true'
      GF_AUTH_LDAP_ALLOW_SIGN_UP: 'true'
      GF_AUTH_LDAP_CONFIG_FILE: /etc/grafana/ldap.toml
      # Grafana plugins (replace with yours)
      GF_INSTALL_PLUGINS: alexanderzobnin-zabbix-app
      GF_USERS_LOGIN_HINT: username
      GF_SMTP_ENABLED: 'true'
      # SMTP host (replace with yours)
      GF_SMTP_HOST: smtp-relay.gmail.com:587
      # SMTP user (replace with yours)
      GF_SMTP_USER: 
      # SMTP password (replace with yours)
      GF_SMTP_PASSWORD: 
      GF_SMTP_FROM_NAME: Grafana Alert
      GF_SMTP_FROM_ADDRESS: 
    healthcheck:
      test: ["CMD", "wget", "http://localhost:3000/","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      # Grafana URL (replace with yours)
      - "traefik.http.routers.grafana.rule=Host(`enter.site.here`)"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.passhostheader=true"
      - "traefik.http.routers.grafana.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_healthy

  traefik:
    image: docker.io/bitnami/traefik:latest
    command:
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Email for Let's Encrypt (replace with yours)
      - "--certificatesresolvers.letsencrypt.acme.email=enter@email.here"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /run/user/< $uid >/podman/podman.sock.sock:/var/run/docker.sock:ro
      - traefik-certificates:/etc/traefik/acme
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`enter.site.here`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      # Basic Authentication for Traefik Dashboard
      # Username: traefikadmin (replace with yours)
      # Passwords must be encoded using MD5, SHA1, or BCrypt h
      - "traefik.http.middlewares.authtraefik.basicauth.users=traefikadmin:$$enter$$pass$$here"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  backups:
    image: docker.io/bitnami/postgresql:latest
    # Database backups prune interval (replace with yours). Default is 7 days.
    # find /srv/grafana-postgres/backups -type f -mtime +7 | xargs rm -f

    # Grafana backups interval (replace with yours). Default is 1 day.
    # sleep 24h

    # Run grafana-restore-database.sh to restore database if needed.
    command: sh -c 'sleep 30m
             && while true; do
             PGPASSWORD="$$(echo $$POSTGRES_PASSWORD)"
             pg_dump
             -h postgres
             -p 5432
             -d grafanadb
             -U grafanadbuser | gzip > /srv/grafana-postgres/backups/grafana-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
             && find /srv/grafana-postgres/backups -type f -mtime +7 | xargs rm -f;
             sleep 24h; done'
    volumes:
      # Database backups location
      - grafana-postgres-backups:/srv/grafana-postgres/backups
    environment:
      # Database password (replace with yours)
      POSTGRES_PASSWORD: 
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      grafana:
        condition: service_healthy
